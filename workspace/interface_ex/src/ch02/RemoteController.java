package ch02;

public interface RemoteController {

	// 인터페이스
	// 구현된것이 아무것도 없는 밑그림만 있는 기본 설계도
	// 멤버번수, 일반 메소드를 가질 수 없고 오직 추상 메소드와 상수만을 멤버로 가질 수 있다.
	// 추상 클래스보다 추상화가 더 높다.
	// 인터페이스는 표준, 약속, 규칙 이다.
	
	
//	인터페이스를 왜 쓰는가?: 인터페이스가 하는 일
//	 - 클래스나 프로그램이 제공하는 기능을 명시적으로 선언
//	 - 일종의 클라이언트와 코드와의 약속이며, 클래스나 프로그램이 제공하는 명세
//	 - 클라이언트 프로그램은 인터페이스에서 선언된 메서드 명세만 보고 이를 구현할 수 있습니다.
//	 - 어떤 객체가 하나의 인터페이스 타입이라는 것은 그 인터페이스가 제공하는 모든 메소드를 구현했다는 의미 입니다.
//	 - 다형성이 성립 된다.
	
	
	// 제약사항
	// 모든 멤버 변수는 상수여야 한다.
	public static final int SERIAL_NUMBER = 100;
	// 모든 메소드는 추상 메소드여야 하고, public abstract 키워드는 생략이 가능하다.
	public abstract void turnOn(); // 원래 추상메소드 작성하던 방법
	void turnOff(); // 키워드 생략하고 추상메소드 사용하는 방법

	
	
	
//	인터페이스의 장점
//	 - 표준화가 가능하다.
//	 - 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
//	 - 클래스간의 결합도를 낮춰서 유연한 코드를 설계 할 수 있다.
//
//	정리 : 객체지향 패러다임 핵심
//	 - 객체와 객체간에 상호 협력해서 코드를 설계해 나간다. (버스, 지하철, 학생, 스타)
//	 - 객체와 객체간의 관계를 정의하여 코드를 설계해 나간다. (상속, 포함관계, 추상클래스, 인터페이스)
//	 - 다형성 (클래스를 다양한 형태로 바라본다)!!!!!!!!!
	
	
	
}
